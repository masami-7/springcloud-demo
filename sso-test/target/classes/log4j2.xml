<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--status是用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorterval是用于指定log4j自动重新检测读取配置内容的间隔时间,单位为秒（s）,最小值为5秒-->
<Configuration status="info" monitorInterval="1800">
    <!--全局属性配置,使用时通过${name}-->
    <properties>
        <property name="APP_NAME">test</property>
        <property name="LOG_PATH">E:/sso/logs/${APP_NAME}</property>
        <!--日志输出格式-控制台-->
        <!--%-5不足20个字符则在用空格补足，有没有-代表左或右补齐-->
        <!--p或level日记级别-->
        <property name="PATTERN_CONSOLE">%d{yyyy-MM-dd HH:mm:ss.SSS} | %blue{%traceId} | %highlight{%-5p}| %magenta{${sys:PID}} | %yellow{%t} | %cyan{%l} : %msg%n
        </property>
        <!--日志输出格式-文件-->
        <property name="PATTERN_FILE">%d{yyyy-MM-dd HH:mm:ss.SSS} | %traceId | %-5p| ${sys:PID} | %t | %l : %msg%n
        </property>
    </properties>

    <Appenders>
        <!--*********************控制台日志***********************-->
        <!--name用于指定Appender的名称-->
        <!--target用于指定输出目标,一般是SYSTEM_OUT或SYSTEM_ERR,默认是SYSTEM_OUT-->
        <Console name="console" target="SYSTEM_OUT">
            <!--PatternLayout：用于指定输出格式，不设置的话，默认为:%m%n-->
            <!--设置日志格式及颜色-->
            <PatternLayout pattern="${PATTERN_CONSOLE}"/>
        </Console>

        <!--*********************文件日志***********************-->
        <!--fileName: 日志存储路径-->
        <!--filePattern: 历史日志封存路径。其中%d{yyyy-MM-dd}表示了日志的时间单位是天,log4j2自动识别zip等后缀，表示历史日志需要压缩-->
        <RollingFile name="RollingFile" fileName="${LOG_PATH}/${APP_NAME}.log"
                     filePattern="${LOG_PATH}/$${date:yyyy-MM}/${APP_NAME}_%d{yyyy-MM-dd}_%i.log.zip">
            <!--输出日志的格式, 不设置默认为:%m%n-->
            <PatternLayout pattern="${PATTERN_FILE}"/>
            <!--只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--归档设置-->
            <Policies>
                <!--按时间间隔归档,或的关系
                    1. interval=时间间隔, 单位由filePattern的%d日期格式指定, 此处配置代表每一天归档一次
                    2. modulate="true" 是否对interval取模，决定了下一次触发的时间点。第一次触发时是第一个小时触发，后续以interval间隔触发。
                -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!-- 按照日志文件的大小: size表示当前日志文件的最大size，支持单位：KB/MB/GB-->
                <SizeBasedTriggeringPolicy size="50MB"/>
            </Policies>
            <!-- 历史日志配置: 该属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <!--当文件个数达到的时候会循环覆盖前面已归档的个文件-->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>
    </Appenders>

    <!--Loggers配置-->
    <Loggers>
        <!--
        注意点:
        1. logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等:
           (1). name: 用来指定该logger所适用的类或者类所在的包全路径,继承自Root节点.
           (2). AppenderRef：关联的Appender, 只有定义了logger并引入的appender，appender才会生效
           (3). additivity: logEvent的传递性。true LogEvent处理后传递给父Logger打印。false LogEvent处理后不再向上传递给父Logger(解决日志重复输出问题)
           (4). logger配置的level必须高于或等于Appenders中ThresholdFilter配置的过滤level, 否则会造成信息丢失
        2. root配置日志的根节点
        -->
        <root level="info">
            <AppenderRef ref="console"/>
            <AppenderRef ref="RollingFile"/>
        </root>
        <!--子节点AppenderRef用于指定日志输出到哪个Appender，若没有指定，默认集成自Root-->
<!--        &lt;!&ndash;spring日志&ndash;&gt;-->
<!--        <Logger name="org.springframework" level="debug">-->
<!--            <AppenderRef ref="Console"/>-->
<!--            <AppenderRef ref="RollingFile"/>-->
<!--        </Logger>-->
<!--        &lt;!&ndash;druid数据源日志&ndash;&gt;-->
<!--        <Logger name="druid.sql.Statement" level="debug"/>-->
<!--        &lt;!&ndash; mybatis日志 &ndash;&gt;-->
<!--        <Logger name="com.mybatis" level="warn"/>-->
<!--        <Logger name="com.zaxxer.hikari" level="info"/>-->
<!--        <Logger name="org.quartz" level="info"/>-->
<!--        <Logger name="com.yl.auth.controller" level="debug"/>-->
    </Loggers>
</Configuration>